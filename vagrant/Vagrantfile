# -*- mode: ruby -*-
# vi: set ft=ruby :
##############################################################################
# Copyright (c) 2019 Intel Corporation
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

box = {
  :virtualbox => {
    :centos => { :name => 'generic/centos7', :version=> '1.9.2' },
    :clearlinux => { :name => 'AntonioMeireles/ClearLinux', :version=> '28510' }
  },
  :libvirt => {
    :centos => { :name => 'centos/7', :version=> '1901.01' },
    :clearlinux => { :name => 'AntonioMeireles/ClearLinux', :version=> '28510' }
  }
}

if ENV['no_proxy'] != nil or ENV['NO_PROXY']
  $no_proxy = ENV['NO_PROXY'] || ENV['no_proxy'] || "127.0.0.1,localhost,10.0.2.15"
  $subnet = "192.168.123"
  # NOTE: This range is based on vagrant-libvirt network definition CIDR 192.168.121.0/27
  (1..31).each do |i|
    $no_proxy += ",#{$subnet}.#{i}"
  end
end

distro = (ENV['QAT_DISTRO'] || :centos).to_sym
vagrant_root = File.dirname(__FILE__)
vagrant_root.slice! "vagrant"
puts "[INFO] Shared folder: #{vagrant_root}"
puts "[INFO] Linux Distro: #{distro} "

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox
  config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.synced_folder '../', "#{vagrant_root}", create: true,
    rsync__args: ["--verbose", "--archive", "--delete", "-z"]
    config.vm.provision "shell", inline: <<-SHELL
      source /etc/os-release || source /usr/lib/os-release
      case ${ID,,} in
          clear-linux-os)
              mkdir -p /etc/kernel/{cmdline.d,cmdline-removal.d}
              echo "module.sig_unenforce" | sudo tee /etc/kernel/cmdline.d/allow-unsigned-modules.conf
              echo "intel_iommu=igfx_off" | sudo tee /etc/kernel/cmdline-removal.d/disable-iommu.conf
              clr-boot-manager update
              sudo mkdir -p /etc/systemd/resolved.conf.d
              printf "[Resolve]\nDNSSEC=false" | sudo tee /etc/systemd/resolved.conf.d/dnssec.conf
          ;;
      esac
    SHELL
    config.vm.provision :reload
  config.vm.provision 'shell', privileged: false do |sh|
    sh.env = {
      'JENKINS_HOME': '/home/vagrant'
    }
    sh.inline = <<-SHELL
      cd #{vagrant_root}
      sed -ri  "s|^qat_envoy_dest:.*$|qat_envoy_dest: \"$(pwd)\"|g" ./vagrant/krd-vars.yml
      cd ./vagrant/
      ./installer.sh | tee installer.log
    SHELL
  end
  [:virtualbox, :libvirt].each do |provider|
     config.vm.provider provider do |p, override|
       p.cpus = 6
       p.memory = 8192
     end
  end

  config.vm.provider :virtualbox do |v, override|
    override.vm.box =  box[:virtualbox][distro][:name]
    override.vm.box_version = box[:virtualbox][distro][:version]
  end

  config.vm.provider :libvirt do |v, override|
    override.vm.box =  box[:libvirt][distro][:name]
    override.vm.box_version = box[:libvirt][distro][:version]
    v.nested = true
    v.cpu_mode = 'host-passthrough'
    v.management_network_address = "192.168.123.0/27"
    v.management_network_name = "qat-mgmt-net"
    v.random_hostname = true
  end

  if ENV['http_proxy'] != nil and ENV['https_proxy'] != nil
    if Vagrant.has_plugin?('vagrant-proxyconf')
      config.proxy.http     = ENV['http_proxy'] || ENV['HTTP_PROXY'] || ""
      config.proxy.https    = ENV['https_proxy'] || ENV['HTTPS_PROXY'] || ""
      config.proxy.no_proxy = $no_proxy
      config.proxy.enabled = { docker: false }
    end
  end
end
